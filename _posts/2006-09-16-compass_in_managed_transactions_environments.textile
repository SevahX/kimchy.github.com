---
layout: post
title: Compass in Managed Transactions Environments
---

p. Up until now, in order to use Compass, one had to follow the following template:



p. <pre style="line-height: 100%;font-family:monospace;background-color:#ffffff; border-width:0.01mm; border-color:#000000; border-style:solid; padding:4px;"><span style="background-color:#ffffff;">CompassSession session = </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">compass.</span><span style="background-color:#ffffff;">openSession();
CompassTransaction tr = </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">;
</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">try</span><span style="background-color:#ffffff;"> {
    tr = session.beginTransaction();
    </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// work with Compass session
</span><span style="background-color:#ffffff;">    tr.commit();
} </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">catch</span><span style="background-color:#ffffff;"> (Exception e) {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">if</span><span style="background-color:#ffffff;"> (tr != </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">) {
        tr.rollback();
    }
} </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">finally</span><span style="background-color:#ffffff;"> {
    session.close();
}
</span></pre>



p. Compass also came with a simple CompassTemplate class that used the template design pattern in order to simplify the usage. But still, when using Compass within a managed transaction environment, there isn't really a need for all the Compass managed transaction code, since the transactions are already managed outside of the Compass code. This is the case when working with JTA and CMT, or when using Spring transaction support (either programmatically or declaratively).



p. Compass already binds its sessions to a transaction, so they are reused when being opened again within the same running transaction. With this new feature Compass tries to automatically join an already running outer transaction. The transaction can be an outer local Compass transaction, a JTA transaction, or a Spring managed transaction. Basically what it means is that if your Compass code already runs in a JTA or a Spring managed transaction, you won't have to begin a Compass transaction, commit/rollback the transaction, or even close the session. The code ends up looking like this:



p. <pre style="line-height: 100%;font-family:monospace;background-color:#ffffff; border-width:0.01mm; border-color:#000000; border-style:solid; padding:4px;"><span style="color:#808080;background-color:#ffffff;font-style:italic;">// there is already a running transaciton
// (outer local Compass one, JTA, or Spring)
</span><span style="background-color:#ffffff;">CompassSession session = </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">compass.</span><span style="background-color:#ffffff;">openSession();
</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// work with Compass session, no need to call
// beginTransaction or close on the session
</span></pre>



p. This should really simplify Compass usage within a JEE/CMT or Spring environments, and is part of 1.1 M2 SNAPSHOT and beyond. Enjoy!

